<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
                      "http://docbook.org/xml/4.2/docbookx.dtd" [
<!ENTITY figtype "#FIGTYPE#">
<!ENTITY timestamp "#DATE#">
<!ENTITY version "#VERSION#">
<!ENTITY % draft "#DRAFTS#">
]>

    <!--
        Embed your block with these to set it to "draft" <![%draft;[ <your
        block> ]]>
    -->
<book>
    <bookinfo>
        <title>websmsbox &version;&timestamp;
            User's Guide
        </title>
        <subtitle>PLUGIN-Based queue engine for Kannel</subtitle>
        <authorgroup>
            <author>
                <firstname>Anshu</firstname>
                <surname>S.</surname>
                <affiliation>
          <jobtitle>Websmsbox Author</jobtitle>
                    <orgname>Linux Consulting</orgname>
                    <address>
                        <email>anshusah@hotmail.com</email>
                        <otheraddr>http://www.websmspanel.com/</otheraddr>
                    </address>
                </affiliation>
            </author>
        </authorgroup>
        <abstract>
            <title>Abstract</title>
            <para>This document describes how to install and use websmsbox, the
                PLUGIN-Based queue engine for Kannel.</para>
        </abstract>
        <revhistory>
            <revision>
                <revnumber>&version;
                </revnumber>
                <date>&timestamp;
                </date>
            </revision>
        </revhistory>
    </bookinfo>
    <chapter>
        <title>Introduction</title>
        <highlights>
      <para>Websmsbox is a special Kannel box that sits between bearerbox and smsbox and
      uses a database queue to store and forward messages.</para>
    </highlights>
        <sect1>
            <title>Overview</title>
            <para>Websmsbox behaves similar to other Kannel boxes and share a compatible configuration
              file format and command line options.</para>
            <para>It works between bearerbox and smsbox, intercept all messages and uses user defined plugins to intercept and process messages.</para>
        </sect1>
        <sect1>
            <title>Features</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Modular architecture: Easily integrates into Kannel infrastructure.</para>
                    </listitem>
          <listitem>
            <para>Compatible configuration file format and command line arguments.</para>
          </listitem>
          <listitem>
            <para>Supports most Kannel features.</para>
          </listitem>
                </itemizedlist>
            </para>
        </sect1>
        <sect1>
            <title>Requirements</title>
            <para>websmsbox is being developed on Linux and OSX systems, and
                should be fairly easy to export to other Unix-like systems. However,
                we don't yet support other platforms, due to lack of time, although
                it should be working without major problems on Windows (through
                Cygwin), Mac OSX, Solaris and FreeBSD. </para>
            <para>
                websmsbox requires the following software environment:
                <itemizedlist>
                    <listitem>
                        <para>Kannel libraries (gwlib) installed.</para>
                    </listitem>
                    <listitem>
                        <para>C compiler and libraries for ANSI C, with normal Unix
                            extensions such as BSD sockets and related tools. (GNU's GCC
                            tool-chain is recommended)</para>
                    </listitem>
                    <listitem>
                        <para>GNU Make.</para>
                    </listitem>
                    <listitem>
                        <para>
                            An implementation of POSIX threads (
                            <filename>pthread.h</filename>
                            ).
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            DocBook processing tools: DocBook style-sheets, jade, jadetex,
                            etc; see
                            <filename>README</filename>
                            , section `Documentation', for more information (pre-formatted
                            versions of the documentation are available, and you can compile
                            Websmsbox itself even without the documentation tools).
                        </para>
                    </listitem>
                    <listitem>
                        <para>GNU autoconf</para>
                    </listitem>
                </itemizedlist>
            </para>
        </sect1>
    </chapter>
    <chapter>
        <title>Installing websmsbox</title>
        <para>This chapter explains how to build and install websmsbox from
            source or from a binary package. The goal of this chapter is to get
            the module compiled and all the files in the correct places; the next
            chapter will explain how to configure it.</para>
        <note>
            <para>
                If you are upgrading from a previous version, please look at
                <xref linkend="upgrading-notes"/> for any important information.
            </para>
        </note>
        <sect1>
            <title>Getting the source code</title>
            <para>
                The source code to Websmsbox is available for download at
                <ulink url="https://github.com/donald-jackson/kannel-websmsbox">https://github.com/donald-jackson/kannel-websmsbox</ulink>.
                It is available in various formats and you can choose to download
                either the latest release version or the daily snapshot of the
                development source tree for the next release version, depending on
                whether you want to use Websmsbox for production use or to participate
                in the development.
            </para>
        </sect1>
        <sect1>
            <title>Finding the documentation</title>
            <para>
                The documentation for Websmsbox consists of two parts:
                <orderedlist>
                    <listitem>
                        <para>
                            <citetitle>User's Guide</citetitle>
                            , i.e., the one you're reading at the moment.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            The
                            <filename>README</filename>
                            and various other text files in the source tree.
                        </para>
                    </listitem>
                </orderedlist>
            </para>
            <para>
                You can also find general information on Kannel's
                <ulink url="http://www.kannel.org">website</ulink>
                and information about existing problems at
                <ulink url="http://bugs.kannel.org">our bugtracker</ulink>
                .
            </para>
            <para>
                We intend to cover everything you need to install and use Websmsbox is
                in
                <citetitle>User's Guide</citetitle>
                , but the guide is still incomplete in this respect. The
                <filename>README</filename>
                is not supposed to be very important, nor contain much information.
                Instead, it will just point at the other documentation.
            </para>
        </sect1>
        <sect1>
            <title>Compiling websmsbox</title>
            <para>
                If you are using Websmsbox on a supported platform, or one that is
                similar enough to one, compiling Websmsbox should be trivial. After you
                have unpacked the source package of your choose, or after you have
                checked out the source code from CVS, enter the following commands:
                <screen>
                    <userinput> ./bootstrap ./configure make </userinput>
                </screen>
                The
                <filename>bootstrap</filename>
                script uses autoconf to generate the files needed to build the
                module. The
                <filename>configure</filename>
                script investigates various things on your computer for the Websmsbox
                compilation needs, and writes out the
                <filename>Makefile</filename>
                used to compile the module.
                <command>make</command>
                then runs the commands to actually compile it.
            </para>
            <para>
                If either command writes out an error message and stops before it
                finishes its job, you have a problem, and you either need to fix it
                yourself, if you can, or report the problem to the Kannel project.
                See
                <xref linkend="bug-reporting"/> for details.
            </para>
            <para>
                For detailed instruction on using the configuration script, see file
                <filename>INSTALL</filename>
                . That file is a generic documentation for
                <command>configure</command>
                . Websmsbox defines a few additional options:
                <itemizedlist>
                    <listitem>
                        <para>
                            <literal>--with-kannel-dir=</literal>
                            <replaceable>DIR</replaceable>
                            Where to look for Kannel Gateway libs and header files
                            <replaceable>DIR</replaceable>
                            points to the Kannel installation directory. Defaults to
                            <literal>/usr/local</literal>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <literal>--disable-docs (default is --enable-docs)</literal>
                            Use this option if you don't have DocBook installed and/or you
                            want to save some time and CPU cycles. Pre-generated
                            documentation is available on Kannel's site. Default behavior is
                            to build documentation, b.e., converting the User Guide from the
                            DocBook markup language to PostScript and HTML if DocBook is
                            available.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <literal>--enable-drafts (default is
                                --disable-drafts)</literal>
                            When building documentation, include the sections marked as
                            <literal>draft</literal>
                            .
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                You may need to add compilations flags to configure:
                <screen>
                    <userinput>CFLAGS='-pthread' ./configure</userinput>
                </screen>
                The above, for instance, seems to be required on FreeBSD. If you
                want to develop Websmsbox, you probably want to add CFLAGS that make
                your compiler use warning messages. For example, for GCC:
                <screen>
                    <userinput>CFLAGS='-Wall -O2 -g' ./configure</userinput>
                </screen>
                (You may, at your preference, use even stricter checking options.)
            </para>
        </sect1>
        <sect1>
            <title>Installing Websmsbox</title>
            <para>
                After you have compiled Kannel, you need to install the websmsbox binary
                in a suitable place. This is most easily done by using
                <command>make</command> again:
                <screen>
                    <userinput>make bindir=<replaceable>/path/to/directory</replaceable> install</userinput>
                </screen>
                Replace
                <replaceable>/path/to/directory</replaceable>
                with the pathname of the actual directory where the programs should
                be installed. This install the websmsbox binary:
                <simplelist>
                    <member>
                        <filename>gw/websmsbox</filename>
                    </member>
                </simplelist>
            </para>
        </sect1>
        <sect1>
            <title>Using pre-compiled binary packages</title>
            <para>To be done</para>
            <sect2>
                <title>Installing Websmsbox from RPM packages</title>
                <para>To be done</para>
            </sect2>
      <sect2>
        <title>Installing Websmsbox from DEB packages</title>
        <para>To be done</para>
      </sect2>
        </sect1>
    </chapter>
    <chapter>
        <title>Using websmsbox</title>
        <para>This chapter explains how to configure and run Websmsbox and also
          how to tell if it's running from Kannel's HTTP interface.</para>
        <para>There is only one configuration file for Websmsbox, and that file
          commands all aspects of its execution.</para>
        <sect1>
            <title>Configuring Websmsbox</title>
            <para>The configuration file can be divided into two parts:
                websmsbox configuration and database connection.</para>
            <para>Details of each part are in appropriate sections later on
                this documentation.</para>
            <sect2>
                <title>Configuration file syntax</title>
                <para>The syntax used for the configuration file is the same used
                  in Kannel. Skip this section if you are already familiar with it.
                  Otherwise, keep on reading:</para>
                <para>
                    A configuration file consists of groups of configuration variables.
                    Groups are separated by empty lines, and each variable is defined
                    on its own line. Each group in Websmsbox configuration is
                    distinguished with a group variable. Comments are lines that begin
                    with a number sign (
                    <literal>#</literal>
                    ) and are ignored (they don't, for example, separate groups of
                    variables).
                </para>
                <para>
                    A variable definition line has the name of the variable, and equals
                    sign (
                    <literal>=</literal>
                    ) and the value of the variable. The name of the variable can
                    contain any characters except whitespace and equals. The value of
                    the variable is a string, with or without quotation marks (
                    <literal></literal>
                    ) around it. Quotation marks are needed if the variable needs to
                    begin or end with whitespace or contain special characters. Normal
                    C escape character syntax works inside quotation marks.
                </para>
                <para>
                    Perhaps an example will make things easier to comprehend:
<programlisting>
01 # Websmsbox configuration
02 group = websmsbox
03 log-level = 0
04 log-file = "/var/log/kannel/kannel-websmsbox.log"
05 bearerbox-host = localhost
06 bearerbox-port = 13001
07 smsbox-port = 13005
08 smsbox-port-ssl = false
    
   

09 group=websmsbox-plugin
10 path=/opt/kannel/sbin/plugins/websmsbox_example.so
11 init="websmsbox_example_init"
12 priority=1

    
13 group=websmsbox-plugin
14 path=/opt/kannel/sbin/plugins/websmsbox_example.so
15 init="websmsbox_example_init"
16 priority=2
    
</programlisting>
                    The above snipped shows a Websmsbox configuration which has two instances of the example plugin.
                </para>
                <para>Lines 1 and 14 are comment lines. Line 13 separates the two
                    groups. The remaining lines define variables. The group type is
                    defined by the group variable value.</para>
                <para>The various variables that are understood in each type of
                    configuration group are explained below.</para>
                <para>
                    Some variable values are marked as <literal>'bool'</literal>.
                    The value for variable can be like true, false, yes, no, on, off,
                    0 or 1. Other values are treated as 'true' while if the variable is
                    not present at all, it is treated as being 'false'.
                </para>
            </sect2>
            <sect2 id="includes">
                <title id="includes.title">Inclusion of configuration files</title>
                <para>
                    A configuration file may contain a special directive called
                    <literal>include</literal>
                    to include other file or a directory with files to the
                    configuration processing.
                </para>
                <para>This allows to segment the specific configuration groups
                    required for several services and boxes to different files and
                    hence to have more control in larger setups.</para>
                <para>
                    Here is an example that illustrates the
                    <literal>include </literal>
                    statement :
<programlisting>
group = websmsbox
...
log-file = "/var/log/kannel/kannel-websmsbox.log"
log-level = 0
include = "plugins.conf"
 </programlisting>
                    Above is the main
                    <literal>websmsbox.conf</literal>
                    configuration file that includes the following
                    <literal>plugins.conf</literal>
                    file with all required directives for the plugin setup.
<programlisting>
group=websmsbox-plugin
path=/opt/kannel/sbin/plugins/websmsbox_example.so
init="websmsbox_example_init"
priority=2
args=plugin-config.conf
</programlisting>
                    The above
                    <literal>include</literal>
                    statement may be defined at any point in the configuration file and
                    at any inclusion depth. Hence you can cascade numerous inclusions
                    if necessary.
                </para>
                <para>At process start time inclusion of configuration files
                    breaks if either the included file can not be opened and processed
                    or the included file has been processed already in the stack and a
                    recursive cycling has been detected.</para>
            </sect2>
            <sect2>
                <title>Websmsbox configuration</title>
                <para>
                    The configuration file
                    <emphasis>MUST</emphasis>
                    always include an 'websmsbox' group for general configuration. This
                    group should be the first group in the configuration file.
                </para>
                <para>
                    As its simplest form, 'websmsbox' group looks like this:
<programlisting>
group = websmsbox
bearerbox-port = 13001
smsbox-port = 13005
</programlisting>
                    Naturally this is usually not sufficient for any real use. Thus, one or
                    more of the optional configuration variables are used. In following
                    list (as in any other similar lists), all mandatory variables are
                    marked with <literal>(m)</literal>, while conditionally mandatory
                    (variables which must be set in certain cases) are marked with
                    <literal>(c)</literal>
                    .
                </para>
                <table frame="none">
                    <title>Websmsbox Group Variables</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Variable</entry>
                                <entry>Value</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>
                                    <literal>group (m)</literal>
                                </entry>
                                <entry>
                                    <literal>websmsbox</literal>
                                </entry>
                                <entry valign="bottom"> This is a mandatory variable </entry>
                            </row>
                <entry>
                  <literal>bearerbox-host (m)</literal>
                </entry>
                <entry>host-name</entry>
                <entry valign="bottom">This is the host where bearerbox is running.</entry>
              </row>
              <row>
                  <entry>
                      <literal>bearerbox-port (m)</literal>
                  </entry>
                  <entry>port-number</entry>
                  <entry valign="bottom">This is the port number used to connect to bearerbox.</entry>
              </row>
              <row>
                  <entry>
                      <literal>smsbox-port (c)</literal>
                  </entry>
                  <entry>port-number</entry>
                  <entry valign="bottom"> This is the port number to which the
                      smsboxes, if any, connect. This can be
                      anything you want. Must be set if you want to handle any SMS
                      traffic. </entry>
              </row>
              <row>
                  <entry>
                      <literal>smsbox-port-ssl (o)</literal>
                  </entry>
                  <entry>bool</entry>
                  <entry valign="bottom"> If set to true, the smsbox connection
                      module will be SSL-enabled. Your smsboxes will have to connect
                      using SSL to websmsbox then. This is used to secure
                      communication between websmsbox and smsboxes in case they are
                      in separate networks operated and the TCP communication is not
                      secured on a lower network layer. Defaults to "no". </entry>
              </row>
              
                            <row>
                                <entry>
                                    <literal>log-file</literal>
                                </entry>
                                <entry>filename</entry>
                                <entry valign="bottom">
                                    A file in which to write a log. This in addition to
                                    <literal>stdout</literal>
                                    and any log file defined in command line.
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <literal>log-level</literal>
                                </entry>
                                <entry>number 0..5</entry>
                                <entry valign="bottom"> Minimum level of log-file events logged. 0
                                    is for 'debug', 1 'info', 2 'warning, 3 'error' and 4 'panic'
                                    (see Command Line Options) </entry>
                            </row>
            </tbody>
          </tgroup>
        </table>
              <para>A sample more complex 'websmsbox' group could be something like
              this:
<programlisting>
group = websmsbox
bearerbox-host = localhost
bearerbox-port = 13001
smsbox-port = 13005
smsbox-port-ssl = false
log-file = "/var/log/kannel/kannel-websmsbox.log"
log-level = 0
#ssl-client-certkey-file = ""
#ssl-server-cert-file = ""
#ssl-server-key-file = ""
#ssl-trusted-ca-file = ""


</programlisting>
        </para>
      </sect2>
    </sect1>
    <sect1>
      <title>The Plugin groups</title>
      <para><literal>websmsbox</literal> will execute plugins in order of priority (highest to lowest) </para>

      
      <para>The process of configuring a plugin is simple: You need to create a
      <literal>websmsbox-plugin</literal> section which contains the plugin dynamic library file (.so or .dylib) and specifies an init function.</para>
      <sect2>
        <title>websmsbox-plugin configuration</title>
        <para>Definition of a plugin to execute</para>
        <table frame="none">
            <title>MyPlugin Database connection configuration variables</title>
            <tgroup cols="3">
                <thead>
                 <row>
                   <entry>Variable</entry>
                   <entry>Value</entry>
                   <entry>Description</entry>
                 </row>
                </thead>
                <tbody>
                 <row><entry><literal>group</literal></entry>
                   <entry><literal>websmsbox-plugin (m)</literal></entry>
                   <entry valign="bottom">
                     This is a mandatory variable.
                   </entry>
                 </row>

                 <row><entry><literal>path (m)</literal></entry>
                   <entry><literal>string</literal></entry>
                   <entry valign="bottom">
                    This is the full path to the .so file to load.
                   </entry></row>

                 <row><entry><literal>init (m)</literal></entry>
                   <entry><literal>string</literal></entry>
                   <entry valign="bottom">
                      This is the name of the init function to initialize this plugin. This function will hook in other functions as needed.
                   </entry></row>

             <row><entry><literal>priority (o)</literal></entry>
               <entry><literal>number</literal></entry>
               <entry valign="bottom">
                  The execution priority of the plugin (higher numbers get executed first)
               </entry></row>
               
               <row><entry><literal>args (o)</literal></entry>
                   <entry><literal>string</literal></entry>
                   <entry valign="bottom">
                      Arguments to pass to the plugin for initialization or other purposes.
                   </entry></row>

                
                </tbody>
            </tgroup>
        </table>

        <para>Example configuration:</para>

<programlisting>
group = myplugin-connection
id = my-websmsbox
host = localhost
username = foo
password = bar
database = kannel
max-connections = 1
</programlisting>
      </sect2>
    </sect1>
    <sect1>
      <title>Running Websmsbox</title>

    <para>You need to start <literal>websmsbox</literal> after starting
    the <literal>bearerbox</literal>, otherwise it won't have a port
    open to connect to. The preferred way to do this is to include
    websmsbox into your Kannel's startup script.
  </para>

<sect2>
<title>Starting the box</title>

  <para>If you want to start it from command line (for testing, for
  example), give the following command:

    <screen><userinput>
    /path/to/websmsbox -v 1 [config-file]
    </userinput></screen>

  The <option>-v 1</option> sets the logging level to
  <literal>INFO</literal>. This way, you won't see a large amount of
  debugging output (the default is <literal>DEBUG</literal>). Full
  explanation of Websmsbox command line arguments is below.</para>

  <para><emphasis>[config-file]</emphasis> is the name of the
  configuration file you are using with Websmsbox. The basic distribution
  packet comes with a sample configuration file you can use with some
  minor tweakings (check on the <literal>/examples</literal> folder.
  Feel free to edit the file to suit your needs.</para>

  <para>Of course you need to have the <literal>bearerbox</literal> running
  before starting the box. Without the bearer box, websmsbox won't even start.</para>
</sect2>

<sect2 id="arguments">
<title id="arguments.title">Command line options</title>

 <para>Websmsbox accept certain command line options
   and arguments when they are launched. These arguments are:</para>

 <table frame="none">
  <title>Websmsbox Command Line Options</title>
  <tgroup cols="2">
  <tbody>
   <row><entry><literal>-v &lt;level&gt;</literal></entry>
        <entry morerows="1" valign="bottom">
             Set verbosity level for stdout (screen) logging. Default is 0,
             which means 'debug'. 1 is 'info, 2 'warning', 3
             'error' and 4 'panic'
        </entry></row>
   <row><entry><literal>--verbosity &lt;level&gt;</literal></entry></row>

   <row><entry><literal>-D &lt;places&gt;</literal></entry>
        <entry morerows="1" valign="bottom">
             Set debug-places for 'debug' level output.
        </entry></row>
   <row><entry><literal>--debug &lt;places&gt;</literal></entry></row>

   <row><entry><literal>-F &lt;file-name&gt;</literal></entry>
        <entry morerows="1" valign="bottom">
              Log to file named file-name, too. Does not overrun or
              affect any log-file defined in configuration file.
        </entry></row>
   <row><entry><literal>--logfile &lt;file-name&gt;</literal></entry></row>

   <row><entry><literal>-V &lt;level&gt;</literal></entry>
        <entry morerows="1" valign="bottom">
            Set verbosity level for that extra log-file (default 0,
            which means 'debug'). Does not affect verbosity level of
            the log-file defined in configuration file, not verbosity
            level of the <literal>stdout</literal> output.
        </entry></row>
   <row><entry><literal>--fileverbosity &lt;level&gt;</literal></entry></row>

   <row><entry><literal>-H</literal></entry>
        <entry morerows="1" valign="bottom">
             Only try to open HTTP sendsms interface; if it
             fails, only warn about that, do not exit. (smsbox only)
        </entry></row>
   <row><entry><literal>--tryhttp</literal></entry></row>

   <row><entry><literal>-g</literal></entry>
        <entry morerows="1" valign="bottom">
             Dump all known config groups and config keys to stdout
             and exit.
        </entry></row>
   <row><entry><literal>--generate</literal></entry></row>

   <row><entry><literal>-u &lt;username&gt;</literal></entry>
        <entry morerows="1" valign="bottom">
             Change process user-id to the given.
        </entry></row>
   <row><entry><literal>--user &lt;username&gt;</literal></entry></row>

   <row><entry><literal>-p &lt;filename&gt;</literal></entry>
        <entry morerows="1" valign="bottom">
             Write process PID to the given file.
        </entry></row>
   <row><entry><literal>--pid-file &lt;filename&gt;</literal></entry></row>

   <row><entry><literal>-d</literal></entry>
        <entry morerows="1" valign="bottom">
             Start process as daemon (detached from a current shell session).
             Note: Process will change CWD (Current working directory) to <literal>/</literal>,
                   therefore you should ensure that all paths to binary/config/config-includes are
                   absolute instead of relative.
        </entry></row>
   <row><entry><literal>--daemonize</literal></entry></row>

   <row><entry><literal>-P</literal></entry>
        <entry morerows="1" valign="bottom">
             Start watcher process. This process watch a child process and if child process
             crashed will restart them automatically.
        </entry></row>
   <row><entry><literal>--parachute</literal></entry></row>

   <row><entry><literal>-X &lt;scriptname&gt;</literal></entry>
        <entry morerows="1" valign="bottom">
             Execute a given shell script or binary when child process crash detected. This option
             is usable only with <literal>--parachute/-P</literal>.
             Script will be executed with 2 arguments:
                 scriptname 'processname' 'respawn-count'.
        </entry></row>
   <row><entry><literal>--panic-script &lt;scriptname&gt;</literal></entry></row>

 </tbody>
 </tgroup>
 </table>

</sect2>
</sect2>
</sect1>
</chapter>

<chapter id="bug-reporting">
<title>Getting help and reporting bugs</title>

    <para>This chapter explains where to find help with problems
    related to the gateway, and the preferred procedure for reporting
    bugs and sending corrections to them.</para>

    <para>The Kannel development mailing list is devel@kannel.org.  To subscribe, send mail to <ulink url="mailto:devel-subscribe@kannel.org">devel-subscribe@kannel.org</ulink>.
    This is currently the best location for asking help and reporting
    bugs. Please include configuration file and version number.</para>

</chapter>

<appendix id="upgrading-notes">
<title>Upgrading notes</title>

    <para>This appendix includes pertinent information about required
    changes on upgrades.
    </para>

    <para>As a general rule, always check the <literal>ChangeLog</literal> file
    before upgrading, because it may contain important information worth knowing
    before making any changes.</para>

<sect1>
    <title>Upgrading from different websmsbox versions</title>
    <para>Websmsbox is a simple module that usually upgrades easily and without requiring any other changes.</para>
</sect1>

</appendix>
</book>

